<?php
/**
 * Methods for displaying presentation data in the view.
 *
 * @link          http://example.com CAPTCHA Project
 */
 
require_once dirname(__FILE__).'/../config.php';
require_once dirname(__FILE__).'/Captcha.php';

/**
 * View.
 *
 * Class holding everything that is related to displaying the CAPTCHA in the browser.
 *
 * @package       -
 * @subpackage    -
 */
class View {

/**
 * Holds several tags.
 *
 * @var array
 * @access public
 */
    var $tags = array(
        'css' => '<link rel="stylesheet" type="text/css" href="%s" />',
        'js' => '<script type="text/javascript" src="%s"></script>',
        'img'=>'<img src="%s" $s />',
        'input'=>'<input type="%s" name="%s" %s>'
    );

/**
 * Holds domain root.
 *
 * @var string
 * @access public
 */
    var $domainRoot = null;
    
/**
 * Constructor
 *
 * @param -.
 * @return ViewClass
 */ 
    function __construct() {
        $this->domainRoot = 'http://'.$_SERVER['HTTP_HOST'].$_SERVER['REQUEST_URI'];
        
        $this->Captcha = new Captcha();

    }

/**
 * Generate css link or script tags
 *
 * @param string $type Type the tag that want to generate, possible value are css or js.
 * @param array $files Array contain the filea name located in the statics directory.
 * @return string HTML tag for css or javascript
 * @access public
 */
    function show($type='css',$files=array()) {
        $out = null;
        foreach($files as $file) {
            $file = $this->domainRoot.'include/statics/'.$type.'/'.$file;
            $out .= sprintf($this->tags[ $type ], $file);
        }
        return $out;
    }
    
/**
 * Generate image tag
 *
 * @param string $file Source image to be displayed in the img tag
 * @param string $attr img tag attributes.
 * @return string HTML tag for image.
 * @access public
 */
    function img($file=null,$attr=null) {
        $file = $this->domainRoot.'temp/'.$file;
        $out = sprintf($this->tags[ 'img' ], $file);
        return $out;
    }
    
/**
 * Generate input tag.
 *
 * @param string $type Type of the HTML input tag.
 * @param string $name Name for the HTML input tag.
 * @param string $attr Another attributes for the HTML input tag.
 * @return string HTML tag for input.
 * @access public
 */
    function input($type=null,$name=null,$attr=null) {
        $out = sprintf($this->tags[ 'input' ],$type,$name,$attr);
        return $out;
    }
    
/**
 * Generate title for tha CAPTCHA.
 *
 * @param -.
 * @return string HTML markup for CAPTCHA title and help.
 * @access protected
 */
    function __showTitle() {
        $out = '<div class="title">';
        $out .= '<div class="pc-header left">'. CAPTCHA_TITLE .'</div>';
        $out .= '<div class="pc-info right" title="'.CAPTCHA_HELP_HINT.'">help</div>';
        $out .= '<div class="clear"></div>';
        $out .= '</div>';    
        return $out;
    }
   
/**
 * Generate image list in the CAPTCHA. This image will be draggable, there will be a hidden value save in every list.
 *
 * @param array $splits Array containing images and its properties that was generated by Captcha class.
 * @return string HTML markup for draggable images.
 * @access protected
 */ 
    function __showImageList($splits=array()) {
        $out = '<ul class="image-list" style="width:'. $splits['width'] .'px;height:'. $splits['width'] .'.px;">';
        $i = 0;
        foreach($splits['images'] as $item) {
            $out .= '<li class="filled">'
            . '<input type="hidden" name="captcha[arrange][]" value="'.sha1($item).'">'
            . $this->img($item)
            .'</li>';
            $i++;
        }
        $out .= '<div class="clear"></div></ul>';
        return $out;
    }

/**
 * Generate real and ready display CAPTCHA including the hidden value, image list, etc.
 *
 * @param array $options Options for the CAPTCHA.
 * @return string HTML markup for CAPTCHA.
 * @access public
 */
    function generate($options=array()) {
        if($splits = $this->Captcha->imgSplit($options)) {
            shuffle($splits['images']);
            $out = $this->show('css',array('jquery.html5sortable'));
            $out .= '<div class="pc-container">';
            $out .= '<input type="hidden" name="captcha[valid]" value="'. $splits['valid'] .'">';
            if(CAPTCHA_SHOW_TITLE) $out .= $this->__showTitle();
            $out .= $this->__showImageList($splits);
            $out .= $this->show('js',array('jquery.min','json2','jquery.html5sortable'));
            $out .= '<script>$(".image-list").Html5Sortable({type: "fr.marcbuils.DOG_LINE",drop: function(p_srcLine, p_targetLine ) {return true;}});</script>';
            $out .= '<div class="clear"></div></div>';
        }else {
            $out = null;
        }
        return $out;
    }
    
/**
 * It's just for debugging, dont think about it'.
 *
 * @param mixed $var Variable to be displayed.
 * @param boolean $die If true and then will be added the die() function, just that.
 * @return string HTML markup for variable debugging.
 * @access public
 */
    function debug($var=null,$die=true) {
        echo '<pre>';
        print_r($var);
        echo '</pre>';
        if($die) die();
    }
}
